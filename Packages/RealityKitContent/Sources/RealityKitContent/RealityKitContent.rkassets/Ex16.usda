#usda 1.0
(
    customLayerData = {
        string creator = "Reality Composer Pro Version 1.0 (409.100.15)"
    }
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    reorder nameChildren = ["Sphere", "MaterialEx16"]
    def Sphere "Sphere" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/MaterialEx16> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double radius = 0.45
        float3 xformOp:translate = (0, -2.9802322e-8, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def Material "MaterialEx16"
    {
        prepend token outputs:mtlx:surface.connect = </Root/MaterialEx16/PreviewSurface.outputs:out>
        token outputs:realitykit:vertex
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (303.1274, -12.591123)
        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 486

        def Shader "PreviewSurface"
        {
            uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
            color3f inputs:diffuseColor.connect = </Root/MaterialEx16/Image.outputs:out>
            float inputs:metallic
            float3 inputs:normal
            float inputs:opacity
            float inputs:roughness = 0.7
            token outputs:out
            float2 ui:nodegraph:node:pos = (82.02822, 17.698355)
            float2 ui:nodegraph:node:size = (148.5, 199)
            int ui:nodegraph:node:stackingOrder = 484
        }

        def Shader "Image"
        {
            uniform token info:id = "ND_image_color3"
            color3f inputs:default
            asset inputs:file = @TextureImages/artist_workshop_1k.heic@
            string inputs:filtertype
            float2 inputs:texcoord.connect = </Root/MaterialEx16/Add.outputs:out>
            string inputs:uaddressmode
            string inputs:vaddressmode
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (-88.81641, 10.7109375)
            float2 ui:nodegraph:node:size = (148.5, 199)
            int ui:nodegraph:node:stackingOrder = 49
        }

        def Shader "Texcoord"
        {
            uniform token info:id = "ND_texcoord_vector2"
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-530.03516, -51.215733)
            float2 ui:nodegraph:node:size = (180.5, 53)
            int ui:nodegraph:node:stackingOrder = 436
        }

        def Shader "Noise3D"
        {
            uniform token info:id = "ND_noise3d_float"
            float inputs:amplitude = 5
            float inputs:amplitude.connect = </Root/MaterialEx16/Multiply_2.outputs:out>
            float inputs:pivot = 1
            float3 inputs:position.connect = </Root/MaterialEx16/Position.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-517.01953, 81.85068)
            float2 ui:nodegraph:node:size = (105, 145)
            int ui:nodegraph:node:stackingOrder = 436
        }

        def Shader "Position"
        {
            uniform token info:id = "ND_position_vector3"
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-670.44415, 133.72543)
            float2 ui:nodegraph:node:size = (133.5, 40)
            int ui:nodegraph:node:stackingOrder = 436
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/MaterialEx16/Noise3D.outputs:out>
            float inputs:in2 = 2
            float outputs:out
            float2 ui:nodegraph:node:pos = (-407.51172, 145.09286)
            float2 ui:nodegraph:node:size = (60, 36)
            int ui:nodegraph:node:stackingOrder = 436
        }

        def Shader "Subtract"
        {
            uniform token info:id = "ND_subtract_float"
            float inputs:in1.connect = </Root/MaterialEx16/Multiply.outputs:out>
            float inputs:in2 = 1
            float outputs:out
            float2 ui:nodegraph:node:pos = (-332.23438, 157.37021)
            float2 ui:nodegraph:node:size = (61.5, 36)
            int ui:nodegraph:node:stackingOrder = 436
        }

        def Shader "Multiply_1"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/MaterialEx16/Subtract.outputs:out>
            float inputs:in2 = 0.1
            float outputs:out
            float2 ui:nodegraph:node:pos = (-296.6051, 39.2983)
            float2 ui:nodegraph:node:size = (60, 36)
            int ui:nodegraph:node:stackingOrder = 478
        }

        def Shader "Add"
        {
            uniform token info:id = "ND_add_vector2FA"
            prepend float2 inputs:in1.connect = </Root/MaterialEx16/Texcoord.outputs:out>
            float inputs:in2.connect = </Root/MaterialEx16/Multiply_1.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-214.62854, 14.153771)
            float2 ui:nodegraph:node:size = (61.5, 36.5)
            int ui:nodegraph:node:stackingOrder = 478
        }

        def Shader "Time"
        {
            uniform token info:id = "ND_time_float"
            float outputs:out
            float2 ui:nodegraph:node:pos = (-965.1424, 48.850574)
            float2 ui:nodegraph:node:size = (122.5, 53)
            int ui:nodegraph:node:stackingOrder = 436
        }

        def Shader "Sin"
        {
            uniform token info:id = "ND_sin_float"
            float inputs:in.connect = </Root/MaterialEx16/Time.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-818.7166, 48.038074)
            float2 ui:nodegraph:node:size = (116, 40)
            int ui:nodegraph:node:stackingOrder = 436
        }

        def Shader "Add_1"
        {
            uniform token info:id = "ND_add_float"
            float inputs:in1.connect = </Root/MaterialEx16/Sin.outputs:out>
            float inputs:in2 = 1
            float outputs:out
            float2 ui:nodegraph:node:pos = (-709.8182, 54.557606)
            float2 ui:nodegraph:node:size = (61.5, 36.5)
            int ui:nodegraph:node:stackingOrder = 436
        }

        def Shader "Multiply_2"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/MaterialEx16/Add_1.outputs:out>
            float inputs:in2 = 3
            float outputs:out
            float2 ui:nodegraph:node:pos = (-628.0252, 54.84667)
            float2 ui:nodegraph:node:size = (60, 36)
            int ui:nodegraph:node:stackingOrder = 436
        }
    }
}

